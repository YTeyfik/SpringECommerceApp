package com.project.ecommerce.service.concretes;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.project.ecommerce.exceptions.ProductNotFoundException;
import com.project.ecommerce.model.Category;
import com.project.ecommerce.model.Product;
import com.project.ecommerce.repository.CategoryRepository;
import com.project.ecommerce.repository.ProductRepository;
import com.project.ecommerce.request.AddProductRequest;
import com.project.ecommerce.request.UpdateProductRequest;
import com.project.ecommerce.service.abstracts.IProductService;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class ProductManager implements IProductService{
	private ProductRepository productRepository;
	private CategoryRepository categoryRepository;
	
	@Override
	public Product addProduct(AddProductRequest request) {
		//check if the category is found in the DB
		//If yes, set it as the new product category
		//If no, save it as a new category
		
		Category category=Optional.ofNullable(categoryRepository.findByName(request.getCategory().getName()))
				.orElseGet(()->{
					Category newCategory=new Category(request.getCategory().getName());
					return categoryRepository.save(newCategory);
				});
		request.setCategory(category);
		return productRepository.save(createProduct(request, category));
	}
	
	private Product createProduct(AddProductRequest request,Category category) {
		return new Product(
				request.getName(),
				request.getBrand(),
				request.getPrice(),
				request.getInventory(),
				request.getDescription(),
				category
				);
				
	}

	@Override
	public List<Product> getAllProducts() {
		return productRepository.findAll();
	}

	@Override
	public Product getProductById(Long id) {
	
		return productRepository.findById(id).orElseThrow(()-> new ProductNotFoundException("Product not found!"));
	}

	@Override
	public void deleteProductById(Long id) {
		/*
		 * productrepository.findById(id).ifPresentOrElse(productrepository::delete, ()
		 * -> {throw new ProductNotFoundException("Product not found");});
		 */
		try {
			productRepository.deleteById(id);
		} catch (ProductNotFoundException e) {
			System.out.println(e+" Product not found!");
		}
	}

	@Override
	public Product updateProduct(UpdateProductRequest request, Long id) {
		return productRepository.findById(id)
				.map(existingProduct -> updateExistingProduct(existingProduct, request))
				.map(productRepository :: save)
				.orElseThrow(()->new ProductNotFoundException("Product not found!"));
	}
	
	private Product updateExistingProduct(Product existingProduct,UpdateProductRequest request) {
		existingProduct.setName(request.getName());
		existingProduct.setBrand(request.getBrand());
		existingProduct.setPrice(request.getPrice());
		existingProduct.setInventory(request.getInventory());
		existingProduct.setDescription(request.getDescription());
		Category category=categoryRepository.findByName(request.getCategory().getName());
		existingProduct.setCategory(category);	
		return existingProduct;
	}
	
	@Override
	public List<Product> getProductsByCategoryName(String categoryName) {
		// TODO Auto-generated method stub
		return productRepository.findByCategory(categoryName);
	}

	@Override
	public List<Product> getProductsByBrand(String brand) {
		return productRepository.findByBrand(brand);
	}

	@Override
	public List<Product> getProductsByCategoryAndBrand(String categoryName, String brand) {
		// TODO Auto-generated method stub
		return productRepository.findByCategoryAndBrand(categoryName,brand);
	}

	@Override
	public List<Product> getProductsByName(String name) {
		return productRepository.findByName(name);
	}

	@Override
	public List<Product> getProductsByBrandAndName(String brand, String name) {
		// TODO Auto-generated method stub
		return productRepository.findByBrandAndName(brand,name);
	}

	@Override
	public Long countProductsByBrandAndName(String brand, String name) {
		// TODO Auto-generated method stub
		return productRepository.countByBrandAndName(brand,name);
	}

}
